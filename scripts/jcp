#!/bin/bash

print_usage() {
	echo "Usage: jcp <command> [problem] [options]"
	echo "Available commands:"
	echo "  install   install jcp by creating softlink"
	echo "  compile   compile program"
	echo "  run       compile and run programs"
	echo "  test      compile and test program"
}

compile () {
	problem=$1
	failed=false
	echo "compiling problem $problem"

	if [ ! -d .jcp ]; then
		echo "Creating jcp directory"
		mkdir .jcp
		if [ ! -d .jcp ]; then
			echo "Cannot creating .jcp directory, aborted"
			exit 1
		fi
	fi
	echo "" > .jcp/compile_error

	if [[ -f $problem.cpp || -f $problem.cc || -f $problem.c++ ]]; then
		if [ -f $problem.cpp ]; then
			filename=$problem.cpp
		elif [ -f $problem.cc ]; then
			filename=$problem.cc
		else
			filename=$problem.c++
		fi

		echo "compiling c++ solution: $filename"
		g++ $filename -Wall -O2 -g -std=c++11 -static -pipe -o .jcp/$problem > .jcp/compile.tmp 2>&1
		if [ $? -eq 0 ]; then
			echo -e "\e[32mSuccess compiling c++ solution\e[0m"
		else
			echo -e "\e[31mFailed compiling c++ solution\e[0m"
			failed=true
			cat .jcp/compile.tmp >> .jcp/compile_error
		fi
	fi

	if [ -f $problem.c ]; then
		echo "compiling c solution: $problem.cpp"
		gcc $problem.c -Wall -O2 -g -static -pipe -o .jcp/$problem > .jcp/compile.tmp 2>&1
		if [ $? -eq 0 ]; then
			echo -e "\e[32mSuccess compiling c solution\e[0m"
		else
			echo -e "\e[31mFailed compiling c solution\e[0m"
			failed=true
			cat .jcp/compile.tmp >> .jcp/compile_error
		fi
	fi

	if [ -f $problem.pas ]; then
		echo "compiling pascal solution: $problem.pas"
		fpc -viwn -O2 -Sg -XS -o.jcp/$problem $problem.pas > .jcp/compile.tmp 2>&1
		if [ $? -eq 0 ]; then
			echo -e "\e[32mSuccess compiling pascal solution\e[0m"
		else
			echo -e "\e[31mFailed compiling pascal solution\e[0m"
			failed=true
			cat .jcp/compile.tmp >> .jcp/compile_error
		fi
	fi

	if [ -f $problem.py ]; then
		echo "Skipping python solution: $problem.py"
		cp $problem.py .jcp/$problem.py > .jcp/compile.tmp 2>&1
		if [ $? -eq 0 ]; then
			echo -e "\e[32mSuccess copying python solution\e[0m"
		else
			echo -e "\e[31mFailed copying python solution\e[0m"
			failed=true
			cat .jcp/compile.tmp >> .jcp/compile_error
		fi
	fi

	if [ -f $problem.java ]; then
		echo "Skipping java solution: $problem.java"
		javac -encoding UTF-8 -d .jcp $problem.java > .jcp/compile.tmp 2>&1
		if [ $? -eq 0 ]; then
			echo -e "\e[32mSuccess compiling java solution\e[0m"
		else
			echo -e "\e[31mFailed compiling java solution\e[0m"
			failed=true
			cat .jcp/compile.tmp >> .jcp/compile_error
		fi
	fi

	if [ $failed = true ]; then
		echo -ne "\e[31m"
		cat .jcp/compile_error
		echo -e "\e[0m"
	fi
}

run() {
	if [[ $# -gt 1 && $2 = compile ]]; then
		compile $1
	fi

	if [ -f .jcp/$1 ]; then
		.jcp/$1
	elif [ -f .jcp/$1.py ]; then
		python .jcp/$1
	elif [ -f .jcp/$1.class ]; then
		java .jcp/$1
	else
		echo -e "\e[31mCannot find executable file\e[0m"
	fi
}

testing() {
	problem=$1
	compile $problem
	files=( $(ls | grep -e "$problem.*in") )

	for file in "${files[@]}"
	do
		len=$(wc -m <<< $file)
		outputfile=$(head -c $(($len-3)) <<< $file)out
		
		run $problem < $file > .jcp/$outputfile

		echo -n "Testing using inputfile [$file]: "
		if [ -f $outputfile ]; then
			diff $outputfile .jcp/$outputfile
			if [ $? -eq 0 ]; then
				echo -e "\e[32mCorrect\e[0m"
			else
				echo -e "\e[31mWrong\e[0m"
			fi
		else
			echo "output file successfully written to .jcp/$outputfile"
		fi
	done
}

install() {
	ln -s $(pwd)/${BASH_SOURCE[0]} /usr/bin/jcp
}

if [ $# -lt 1 ]; then
    print_usage
    exit 1
fi

if [ $1 = "install" ]; then
	install $0
elif [ $1 = "compile" ]; then
	if [ $# -lt 2 ]; then
		echo "Please specify problem name"
		exit 1
	fi
    compile $2
elif [ $1 = "run" ]; then
	if [ $# -lt 2 ]; then
		echo "Please specify problem name"
		exit 1
	fi
    run $2 compile
elif [ $1 = "test" ]; then
	testing $2
else
    print_usage
    exit 1
fi
 